{"version":3,"sources":["components/ComponentList/ComponentList.jsx","components/SimpleButton/SimpleButton.jsx","demos/SimpleButtonDemo.jsx","components/Heading/Heading.jsx","demos/HeadingDemo.jsx","components/Avatar/Avatar.jsx","demos/AvatarDemo.jsx","demos/DemoDisplay.jsx","App.js","serviceWorker.js","index.js","docs/simple-button.md","docs/heading.md","docs/avatar.md"],"names":["components","ComponentList","props","className","map","c","key","onClick","setDemo","SimpleButton","color","size","children","defaultProps","SimpleButtonDemo","useState","markdown","setMarkdown","useEffect","fetch","simpleButtonPath","then","response","text","source","style","margin","alert","Heading","type","switchHeading","HeadingDemo","Avatar","src","alt","name","sizes","AvatarDemo","console","log","avatarPath","display","justifyContent","width","i","toString","DemoDisplay","componentName","switchTo","demo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.710ff41b.chunk.js","sourcesContent":["import React from 'react'\nimport './componentlist.css'\n\n/*Add your component name to the array */\nconst components = ['Avatar', 'Simple Button', 'Heading']\n\nconst ComponentList = (props) => {\n    return (<div className='component-list'>\n        <h2>Components</h2>\n        {components.map(c => <button key={c} onClick={() => { props.setDemo(c) }}>{c}</button>)}\n    </div>)\n}\n\nexport default ComponentList","import React from 'react'\nimport './simplebutton.css'\n\nconst SimpleButton = (props) => {\n    return (<button className={`simple-button ${props.color} ${props.size}`}\n        onClick={props.onClick}>\n        {props.children}\n    </button>)\n}\n\nSimpleButton.defaultProps = {\n    color: 'red',\n    onClick: () => { },\n    children: 'Click here',\n    size: 'sm'\n}\n\nexport default SimpleButton","import React, { useState, useEffect } from 'react'\nimport SimpleButton from '../components/SimpleButton/SimpleButton'\nimport ReactMarkdown from 'react-markdown'\nimport simpleButtonPath from '../docs/simple-button.md'\n\n\nconst SimpleButtonDemo = () => {\n    const [markdown, setMarkdown] = useState('')\n\n    useEffect(() => {\n        fetch(simpleButtonPath).then((response) => response.text()).then((text) => {\n            setMarkdown(text)\n        })\n    })\n\n    const handleClick = () => {\n        alert('Button Clicked')\n    }\n\n    return (<>\n        <ReactMarkdown source={markdown} />\n        <div style={{ margin: 10 }} />\n        <SimpleButton color='blue' onClick={handleClick}> Click Me </SimpleButton>\n    </>\n    )\n}\n\nexport default SimpleButtonDemo","import React from 'react'\n\nconst switchHeading = (type, children) => {\n    switch (type) {\n        case 'h1':\n            return <h1>{children}</h1>\n        case 'h2':\n            return <h2>{children}</h2>\n        case 'h3':\n            return <h3>{children}</h3>\n        case 'h4':\n            return <h4>{children}</h4>\n        case 'h5':\n            return <h5>{children}</h5>\n        case 'h6':\n            return <h6>{children}</h6>\n    }\n}\n\nconst Heading = (props) => {\n    return (<>{switchHeading(props.type, props.children)}</>)\n}\n\nHeading.defaultProps = {\n    type: 'h2',\n}\n\nexport default Heading","import React, { useState, useEffect } from 'react'\nimport Heading from '../components/Heading/Heading'\nimport ReactMarkdown from 'react-markdown'\nimport simpleButtonPath from '../docs/heading.md'\n\nconst HeadingDemo = () => {\n    const [markdown, setMarkdown] = useState('')\n\n    useEffect(() => {\n        fetch(simpleButtonPath).then((response) => response.text()).then((text) => {\n            setMarkdown(text)\n        })\n    })\n\n    return (<>\n        <ReactMarkdown source={markdown} />\n        <Heading type='h3'> I'm an h3 header </Heading>\n    </>\n    )\n}\n\nexport default HeadingDemo","import React from 'react'\nimport PropTypes from 'prop-types';\n\nimport './avatar.css'\n\nconst Avatar = (props) => {\n    return (\n        <div className={`avatar ${props.size} ${props.className}`}>\n            {props.src && <img className={`avatar ${props.size}`} alt={props.name} src={props.src} />}\n            {props.name && !props.src && <span className={`avatar ${props.size}`}>{props.name}</span>}\n        </div>\n    )\n}\n\nAvatar.propTypes = {\n    name: PropTypes.string.isRequired,\n    src: PropTypes.string,\n    size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n};\n\nAvatar.defaultProps = {\n    size: 'md'\n}\n\nexport default Avatar","import React, { useState, useEffect } from 'react'\nimport Avatar from '../components/Avatar/Avatar'\nimport ReactMarkdown from 'react-markdown'\nimport avatarPath from '../docs/avatar.md'\n\nconst sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"];\n\nconst AvatarDemo = () => {\n    const [markdown, setMarkdown] = useState('')\n\n    useEffect(() => {\n        console.log('AvatarDemo component')\n        fetch(avatarPath).then((response) => response.text()).then((text) => {\n            setMarkdown(text)\n        })\n    });\n\n    return (<>\n        <ReactMarkdown source={markdown} />\n        <div style={{ margin: 10 }} />\n        <div style={{ display: \"flex\", justifyContent: \"space-between\", width: 400 }}>\n            {sizes.map((size, i) => <Avatar key={i.toString()} size={size} src=\"https://avatars2.githubusercontent.com/u/53559108?s=460&u=d6851bf5daa2cea22482af9ab17d3e74bc939bdb&v=4\" />)}\n        </div>\n        <div style={{ margin: 16 }} />\n        <div style={{ display: \"flex\", justifyContent: \"space-between\", width: 400 }}>\n            {sizes.map((size, i) => <Avatar key={i.toString()} size={size} name=\"RA\" />)}\n        </div>\n        <div style={{ margin: 10 }} />\n    </>\n    )\n}\n\nexport default AvatarDemo","import React from 'react'\nimport './demodisplay.css'\n/*add your demo in the import statement below */\nimport { SimpleButtonDemo, HeadingDemo, AvatarDemo } from '../exports/exports'\n\nconst switchTo = (componentName) => {\n    switch (componentName) {\n        case 'Simple Button':\n            return <SimpleButtonDemo />\n        case 'Heading':\n            return <HeadingDemo />\n        case 'Avatar':\n            return <AvatarDemo />\n        default:\n            return ''\n    }\n}\n\nconst DemoDisplay = (props) => {\n    return (<div className='demo-display'>\n        {switchTo(props.demo)}\n    </div>)\n}\n\nexport default DemoDisplay","import React, { useState } from 'react';\nimport './App.css';\nimport ComponentList from './components/ComponentList/ComponentList'\nimport DemoDisplay from './demos/DemoDisplay'\n\nfunction App() {\n\n  const [demo, setDemo] = useState('')\n\n  return (\n    <div className=\"App\">\n      <ComponentList setDemo={setDemo} />\n      <DemoDisplay demo={demo} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/simple-button.38c5f1e1.md\";","module.exports = __webpack_public_path__ + \"static/media/heading.1107bdd4.md\";","module.exports = __webpack_public_path__ + \"static/media/avatar.269fca8f.md\";"],"sourceRoot":""}