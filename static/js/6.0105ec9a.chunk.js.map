{"version":3,"sources":["docs/infinite-scroll.md","demos/InfiniteScrollDemo.js"],"names":["module","exports","getUsers","currentPage","results","a","fetch","res","json","data","InfiniteScrollDemo","useState","markdown","setMarkdown","useEffect","infiniteScrollPath","then","text","initialState","setData","page","setPage","hasMore","setHasMore","isLoading","setIsLoading","isError","setIsError","cancel","concat","catch","useFetchUsers","Fragment","source","triggerFunction","loadingComponent","errorComponent","map","d","i","key","name","title","first","last","cell","email"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,4C,mICQrCC,EAAQ,uCAAG,WAAOC,EAAaC,GAApB,iBAAAC,EAAA,sEACEC,MAAM,GAAD,OAHH,4BAGG,kBAA0BH,EAA1B,oBAAiDC,IADxD,cACVG,EADU,gBAEGA,EAAIC,OAFP,cAEVC,EAFU,yBAGTA,EAAKL,SAHI,2CAAH,wDAiGCM,UAlDY,WAAO,IAAD,EACAC,mBAAS,IADT,mBACzBC,EADyB,KACfC,EADe,KAGhCC,qBAAU,WACTR,MAAMS,KACJC,MAAK,SAAAT,GAAG,OAAIA,EAAIU,UAChBD,MAAK,SAAAC,GACLJ,EAAYI,SAPiB,MAzCX,SAAAC,GAAiB,IAAD,EACbP,mBAASO,EAAaT,MADT,mBAC9BA,EAD8B,KACxBU,EADwB,OAEbR,mBAASO,EAAaE,MAFT,mBAE9BA,EAF8B,KAExBC,EAFwB,OAGPV,mBAASO,EAAaI,SAHf,mBAG9BA,EAH8B,KAGrBC,EAHqB,OAIHZ,mBAASO,EAAaM,WAJnB,mBAI9BA,EAJ8B,KAInBC,EAJmB,OAKPd,mBAASO,EAAaQ,SALf,mBAK9BA,EAL8B,KAKrBC,EALqB,KAgCrC,OAzBAb,qBAAU,WACT,IAAIc,GAAS,EAmBb,OAjBAH,GAAa,GACbE,GAAW,GAEXzB,EAASkB,EAAM,IACbJ,MAAK,SAAAT,GACAqB,IACJT,GAAQ,SAAAV,GAAI,OAAIA,EAAKoB,OAAOtB,MAC5BkB,GAAa,GACbE,GAAW,GACXJ,GAAW,OAGZO,OAAM,WACNH,GAAW,GACXF,GAAa,MAGR,WACNG,GAAS,KAER,CAACR,IAEG,CACNX,OACAY,UACAC,UACAE,YACAE,WAesDK,CAAc,CACpEtB,KAAM,GACNW,KAAM,EACNE,SAAS,EACTE,WAAW,EACXE,SAAS,IALFjB,EAXwB,EAWxBA,KAAMY,EAXkB,EAWlBA,QAASC,EAXS,EAWTA,QAASE,EAXA,EAWAA,UAAWE,EAXX,EAWWA,QAQ3C,OACC,kBAAC,IAAMM,SAAP,KACC,kBAAC,IAAD,CAAeC,OAAQrB,IACvB,6BACC,4CACA,kBAAC,IAAD,CACCU,QAASA,EACTE,UAAWA,EACXE,QAASA,EACTQ,gBAAiB,WAChBb,GAAQ,SAAAD,GAAI,OAAIA,EAAO,MAExBe,iBAAkB,yCAClBC,eAAgB,mDAEf3B,EAAK4B,KAAI,SAACC,EAAGC,GACb,OACC,yBAAKC,IAAKD,GACT,sCAAQD,EAAEG,KAAKC,MAAf,aAAyBJ,EAAEG,KAAKE,MAAhC,YAAyCL,EAAEG,KAAKG,OAChD,2BACEN,EAAEO,KADJ,MACaP,EAAEQ","file":"static/js/6.0105ec9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/infinite-scroll.76a4df80.md\";","import React, { useState, useEffect } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nimport InfiniteScroll from '../components/InfiniteScroll/InfiniteScroll';\r\nimport infiniteScrollPath from '../docs/infinite-scroll.md';\r\n\r\nconst API_BASE_URL = 'https://randomuser.me/api';\r\n\r\nconst getUsers = async (currentPage, results) => {\r\n\tconst res = await fetch(`${API_BASE_URL}/?page=${currentPage}&results=${results}`);\r\n\tconst data = await res.json();\r\n\treturn data.results;\r\n};\r\n\r\nconst useFetchUsers = initialState => {\r\n\tconst [data, setData] = useState(initialState.data);\r\n\tconst [page, setPage] = useState(initialState.page);\r\n\tconst [hasMore, setHasMore] = useState(initialState.hasMore);\r\n\tconst [isLoading, setIsLoading] = useState(initialState.isLoading);\r\n\tconst [isError, setIsError] = useState(initialState.isError);\r\n\r\n\tuseEffect(() => {\r\n\t\tlet cancel = false;\r\n\r\n\t\tsetIsLoading(true);\r\n\t\tsetIsError(false);\r\n\r\n\t\tgetUsers(page, 10)\r\n\t\t\t.then(res => {\r\n\t\t\t\tif (!cancel) {\r\n\t\t\t\t\tsetData(data => data.concat(res));\r\n\t\t\t\t\tsetIsLoading(false);\r\n\t\t\t\t\tsetIsError(false);\r\n\t\t\t\t\tsetHasMore(true);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(() => {\r\n\t\t\t\tsetIsError(true);\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t});\r\n\r\n\t\treturn () => {\r\n\t\t\tcancel = true;\r\n\t\t};\r\n\t}, [page]);\r\n\r\n\treturn {\r\n\t\tdata,\r\n\t\tsetPage,\r\n\t\thasMore,\r\n\t\tisLoading,\r\n\t\tisError,\r\n\t};\r\n};\r\n\r\nconst InfiniteScrollDemo = () => {\r\n\tconst [markdown, setMarkdown] = useState('');\r\n\r\n\tuseEffect(() => {\r\n\t\tfetch(infiniteScrollPath)\r\n\t\t\t.then(res => res.text())\r\n\t\t\t.then(text => {\r\n\t\t\t\tsetMarkdown(text);\r\n\t\t\t});\r\n\t});\r\n\r\n\tconst { data, setPage, hasMore, isLoading, isError } = useFetchUsers({\r\n\t\tdata: [],\r\n\t\tpage: 1,\r\n\t\thasMore: true,\r\n\t\tisLoading: false,\r\n\t\tisError: false,\r\n\t});\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<ReactMarkdown source={markdown} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>My User List</h2>\r\n\t\t\t\t<InfiniteScroll\r\n\t\t\t\t\thasMore={hasMore}\r\n\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\tisError={isError}\r\n\t\t\t\t\ttriggerFunction={() => {\r\n\t\t\t\t\t\tsetPage(page => page + 1);\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tloadingComponent={<p>loading...</p>}\r\n\t\t\t\t\terrorComponent={<p>An error ocurred...</p>}\r\n\t\t\t\t>\r\n\t\t\t\t\t{data.map((d, i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div key={i}>\r\n\t\t\t\t\t\t\t\t<h3>{`${d.name.title}. ${d.name.first} ${d.name.last}`}</h3>\r\n\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t{d.cell} - {d.email}\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</InfiniteScroll>\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default InfiniteScrollDemo;\r\n"],"sourceRoot":""}