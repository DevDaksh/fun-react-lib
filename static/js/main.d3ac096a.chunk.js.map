{"version":3,"sources":["components/Avatar/Avatar.jsx","components/Heading/Heading.jsx","components/SimpleButton/SimpleButton.jsx","demos lazy /^/.//.*Demo$/ groupOptions: {} namespace object","components/ComponentList/ComponentList.jsx","demos/DemoDisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["Avatar","props","className","size","src","alt","name","defaultProps","Heading","type","children","switchHeading","SimpleButton","color","onClick","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","ComponentList","placeholder","library","lib","key","setDemo","importView","DemoComponentName","React","lazy","catch","console","log","DemoDisplay","useState","views","setViews","useEffect","a","demo","View","loadViews","Suspense","fallback","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d3ac096a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\n\nimport './avatar.css'\n\nconst Avatar = (props) => {\n    return (\n        <div className={`avatar ${props.size} ${props.className}`}>\n            {props.src && <img className={`avatar ${props.size}`} alt={props.name} src={props.src} />}\n            {props.name && !props.src && <span className={`avatar ${props.size}`}>{props.name}</span>}\n        </div>\n    )\n}\n\nAvatar.propTypes = {\n    name: PropTypes.string.isRequired,\n    src: PropTypes.string,\n    size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n};\n\nAvatar.defaultProps = {\n    size: 'md'\n}\n\nexport default Avatar","import React from 'react';\n\nconst switchHeading = (type, children) => {\n  switch (type) {\n    case 'h1':\n      return <h1>{children}</h1>;\n    case 'h2':\n      return <h2>{children}</h2>;\n    case 'h3':\n      return <h3>{children}</h3>;\n    case 'h4':\n      return <h4>{children}</h4>;\n    case 'h5':\n      return <h5>{children}</h5>;\n    case 'h6':\n      return <h6>{children}</h6>;\n  }\n};\n\nconst Heading = (props) => {\n  return <>{switchHeading(props.type, props.children)}</>;\n};\n\nHeading.defaultProps = {\n  type: 'h2',\n};\n\nexport default Heading;\n","import React from 'react';\nimport './simplebutton.css';\n\nconst SimpleButton = (props) => {\n  return (\n    <button\n      className={`simple-button ${props.color} ${props.size}`}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nSimpleButton.defaultProps = {\n  color: 'red',\n  onClick: () => {},\n  children: 'Click here',\n  size: 'sm',\n};\n\nexport default SimpleButton;\n","var map = {\n\t\"./AvatarDemo\": [\n\t\t21,\n\t\t0,\n\t\t4\n\t],\n\t\"./HeadingDemo\": [\n\t\t22,\n\t\t0,\n\t\t5\n\t],\n\t\"./InfiniteScrollDemo\": [\n\t\t24,\n\t\t0,\n\t\t6\n\t],\n\t\"./SimpleButtonDemo\": [\n\t\t23,\n\t\t0,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 19;\nmodule.exports = webpackAsyncContext;","import React from 'react'\nimport * as library from \"./../\"\n\nconst ComponentList = (props) => {\n  return (\n    <section className='docs-nav'>\n      <div className=\"docs-nav-header\">\n        <span>Components</span>\n        <input type=\"search\" placeholder=\"Search Component\" />\n      </div>\n      <div className=\"docs-nav-list\">\n        {Object.keys(library).map(lib => <span key={lib} onClick={() => { props.setDemo(lib) }}>{lib}</span>)}\n      </div>\n    </section>\n  )\n}\n\nexport default ComponentList;","import React from 'react'\n\nconst importView = DemoComponentName =>\n  React.lazy(() =>\n    import(`./${DemoComponentName || \"SimpleButton\"}Demo`).catch((e) => console.log(\"demo component not exported\"))\n  );\n\nconst DemoDisplay = (props) => {\n  const [views, setViews] = React.useState();\n\n  React.useEffect(() => {\n    async function loadViews() {\n      const View = await importView(props.demo);\n      setViews(<View />)\n    }\n    loadViews();\n\n  }, [props.demo]);\n\n  return (\n    <React.Suspense fallback='Loading views...'>\n      <div className='docs-content markdown-body'>{views}</div>\n    </React.Suspense>\n  )\n}\n\nexport default DemoDisplay;\n","import React, { useState } from 'react';\nimport './App.css';\nimport ComponentList from './components/ComponentList/ComponentList';\nimport DemoDisplay from './demos/DemoDisplay';\n\nfunction App() {\n  const [demo, setDemo] = useState('');\n\n  return (\n    <div className=\"docs\">\n      <ComponentList setDemo={setDemo} />\n      <DemoDisplay demo={demo} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}